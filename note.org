#+TITLE: RUST NOTE
#+AUTHOR: wfj
#+EMAIL: wufangjie1223@126.com
#+OPTIONS: ^:{} \n:t email:t
#+HTML_HEAD_EXTRA: <style type="text/css"> body {padding-left: 26%; background: #e3edcd;} #table-of-contents {position: fixed; width: 25%; height: 100%; top: 0; left: 0; overflow-y: scroll; resize: horizontal;} i {color: #666666;} pre, pre.src:before {color: #ffffff; background: #131926;} </style>
#+HTML_HEAD_EXTRA: <script type="text/javascript"> function adjust_html(){document.getElementsByTagName("body")[0].style.cssText="padding-left: "+(parseInt(document.getElementById("table-of-contents").style.width)+5)+"px; background: #e3edcd;"}; window.onload=function (){document.getElementById("table-of-contents").addEventListener("mouseup",adjust_html,true)}</script>

* rules
** Ownership Rules
+ Each value in Rust has a variable that’s called its owner.
+ There can only be one owner at a time.
+ When the owner goes out of scope, the value will be dropped.

NOTE: temporary value have temporary owner, will be dropped when the temporary owner goes out of scope (i.e. the expression is over)
NOTE: the difference: copy (stack data), move (transfer ownership), clone (deep copy)

#+BEGIN_SRC rust
let a = Rc::new(5);
Rc::clone(&a); // temporary
assert_eq!(1, Rc::strong_count(&a));
#+END_SRC

** Reference Rules(Borrowing Rules)
1. At any given time, you can have either one mutable reference or any number of immutable references.
2. References must always be valid.

NOTE: valid means:
1. reference's scope is no more than owner's
2. cannot borrow immutable value mutably

*** how rust ensure all references always valid (Borrow Checker)
#+begin_src rust
{
    let r;
    {
        let x = 5;
        r = &x;
    }
    println!("r: {}", r);
}
#+end_src

* basic
** if expression
+ every if arms must be the same type
+ if expression can be the rhs of an assignment

#+begin_src rust
let number = if condition { 5 } else { 6 };
#+end_src

** labeled loop
+ define a label: 'label_name: for/while/loop
+ goto the label: break/continue 'label_name;
+ loop expression?: break the_value

** comments (4 kinds)
https://doc.rust-lang.org/rust-by-example/hello/comment.html
+ // Line comments
+ ~/* */~ Block comments
+ //!
+ ~///~

#+BEGIN_SRC rust
let x = 5 + /* 90 + */ 5;
#+END_SRC

** keyword arguments
+ rust function and methods have no keyword arguments
+ the name of arguments is not necessary to be the same
+ prefix a `_` to omit unused warning for traits default implement

see ch17_3_1_state_pattern.rs

** operator precedence
https://doc.rust-lang.org/reference/expressions.html
+ :: (paths)
+ . (method calls, field expressions)
+ () []
+ ?
+ unary (- ! * & &mut) (NOTE: logical and bitwise not are both `!`)
+ as
+ math
+ bitwise
+ comparison
+ logical
+ .. ..=
+ assignment (right to left)

* features
** shadowing
something like a stack
#+BEGIN_SRC rust
let a = 1;
{
    let a = a * 2; // ok
    // let a *= 2; // err
    assert_eq!(a, 2);
}
assert_eq!(a, 1);
#+END_SRC

** method call sugar
Rust automatically adds in &, &mut, or * so object matches the signature of the *method*

** inner and outer attributes
+ inner attribute, must at the beginning of file (or block?) exclude comments
+ outer means out of the (following) declaration?
+ outer attributes' annotated items could be structs, enums and unions

#+BEGIN_SRC rust
#![no_std] // inner attributes
#![allow(dead_code)]

#[allow(dead_code)]
#[derive(Debug)] // outer attributes
#+END_SRC

** .. and ..= operator
*** range (can be used in match pattern)
#+BEGIN_SRC rust
dbg!(&(1..4).collect::<Vec<u8>>());
dbg!(&(1..=4).collect::<Vec<i32>>());
#+END_SRC

*** struct update syntax (may be it's not an operator)
#+begin_src rust
let user2 = User {
    email: String::from("another@example.com"),
    ..user1
};
#+end_src

*** the rest pattern
#+begin_src rust
let week = ["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"];
let [first, middle @ .., last] = week; // not for tuple
assert_eq!(first, "Mon");
dbgt!(&middle);
assert_eq!(last, "Sun");
#+end_src

** ? operator
used to return an `Option` or a `Result`
https://doc.rust-lang.org/rust-by-example/error/option_unwrap/question_mark.html

* confusions
** immutable variables VS constants
+ declare keyword are different: let vs const
+ using mut with constants are not allowed
+ the type of a constants must be annotated (no inferring)
+ constants can be declared in anywhere (usually in global scope)
+ constants may be set only to a constant expression

** mutable variable VS mutable reference
#+BEGIN_SRC rust
let mut lst = vec![1, 2, 3];
let third = &mut lst[2];
// NOTE: third is an immutable variable, also a mutable reference of lst[2]
*third *= 2;
dbg!(&third);
dbg!(&lst[2]);
#+END_SRC

** &mut self VS mut self
+ &mut self is syntactic sugar for self: &mut Self
+ mut self is actually a special kind of shadowing (mut other_param seems much more useful)

** None VS ()
*** None cannot be used directly, unless it can be inferred
value: None::<T>
type: Option<T>

#+begin_src rust
use utils::dbgt::type_of;

let none1: Option<i32> = None;
let none2 = None::<i32>;
assert_eq!(0, std::mem::size_of::<()>());
assert_eq!(none1, none2);
assert_eq!(type_of(&none1), "core::option::Option<i32>");
#+end_src

*** () is unit type, whose only possible value is an empty tuple (which is also ())
+ -> () (can omit)
+ -> Result<(), Box<dyn Error>>
+ HashMap<T, ()>

#+BEGIN_SRC rust
use utils::dbgt::type_of;
assert_eq!(type_of(&()), "()");
#+END_SRC

** statements VS expressions
+ statements do not return values
+ expressions evaluate to a resulting value

*** assignment expression always evaluate to ()
#+begin_src rust
let a = false;
if (a = predicate(x)) {
    // it is ambiguous:
    // 1. an assignment then if
    // 2. if a == predicate(x)
}
#+end_src

*** statements
+ declaration statements
  + let statements
  + item declarations
+ expression statements
  place a semicolon at the end of an expression will change it to a statement

** Clone VS ToOwned (see following traits section)
NOTE: for blanket impl, they are equivalent

the difference:
+ Clone works only for going from &T to T.
  fn clone(&self) -> Self;
+ The ToOwned trait generalizes Clone to construct owned data from any borrow of a given type.
  fn to_owned(&self) -> Self::Owned;

#+BEGIN_SRC rust
let s = "hello world!";
dbgt!(&s.clone());         // &str
dbgt!(&s.to_owned());      // String
dbgt!(&s.to_string());     // String
dbgt!(&(&&s).clone());     // &&&str -> &&str
dbgt!(&(&&s).to_owned());  // &&&str -> &&str
dbgt!(&(&&s).to_string()); // String
#+END_SRC

** TODO Clone VS Copy
** size_of VS size_of_val
#+begin_src rust
let x: [u8; 13] = [0; 13];
let y: &[u8] = &x;
assert_eq!(13, std::mem::size_of_val(y));
let pointer_size = std::mem::size_of::<*const u8>();
assert_eq!(2 * pointer_size, std::mem::size_of::<&[u8]>());
#+end_src

** TODO s.as_str() VS &s[..] VS AsRef<str>
There is no trait behind as_str

** trait's Self vs struct's Self
https://stackoverflow.com/questions/30938499/why-is-the-sized-bound-necessary-in-this-trait

* collections
** Tuple
#+BEGIN_SRC rust
let t: (_, _, _)  = (1, "hello world!", vec![5, 42]); // default or specify
#+END_SRC

+ indexing expression (t.0, t.1)
+ can be used as return values
+ one element tuple: (val,)

#+BEGIN_SRC rust
let too_long_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
println!("too long tuple: {:?}", too_long_tuple);
#+END_SRC

** Array
Arrays' type signature: [T; length]

** Others
| Vec<T>         | ch_08_1_vector.rs  |
| String         | ch_08_2_string.rs  |
| HashMap<K, V>  | ch_08_3_hashmap.rs |
| HashSet<T>     | HashMap<T, ()>     |
| VecDeque<T>    |                    |
| BinaryHeap<T>  | max heap           |
| BTreeMap<K, V> | sorted map         |
| BTreeSet<T>    | BTreeMap<T, ()>    |

* struct
** 3 types
+ normal struct {}
+ named tuple struct ()
+ unit struct (no data, for trait only, ch17_3_1_state_pattern.rs)

** init and update
two ways of initialize syntax: {}, ()
update syntax: ..

() as initializer syntax are actually implemented as functions returning an instance that’s constructed from their arguments
https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html

** mutable
NOTE: a mutable struct's fields are always mutable, otherwise immutable, there are no need to specify, but still need `&mut var` to reference a mutable variable

* enum
store on stack by default

** 3 types of possible value (vs struct's (), {}, unit)
#+BEGIN_SRC rust
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String), // one element tuple
    ChangeColor(i32, i32, i32),
}
#+END_SRC

NOTE: each possible value of an enum can be treated as a struct, except we cannot access the data they wrapped by obj.index or obj.attr

** Option<T>
#+begin_src rust
pub enum Option<T> {
    None,
    Some(T)
}
#+end_src

*** is_some(), is_none()
*** map(), map_or(), map_or_else()
#+begin_src rust
let k = 21;
let a1: Option<i32> = Some(k);
let a2: Option<i32> = None;
let f = |x| x + 5;
assert_eq!(a1.map(f), Some(26));
assert_eq!(a2.map(f), None);
assert_eq!(a2.map_or(42, f), 42);
assert_eq!(a2.map_or_else(|| 2 * k, f), 42);
#+end_src

*** unwrap(), unwrap_or(), unwrap_or_else()
*** and(), and_then() -> Self
logical_and, None is false

*** or(), or_else() -> Self
logical_or, None is false

*** convert to Result<T, E>
+ ok_or() -> Result<T, E>
+ ok_or_else()

*** TODO understand cloned() and copied()
#+begin_src rust
pub const fn cloned(self) -> Option<T>
where
    T: ~const Clone,
{
    match self {
	  Some(t) => Some(t.clone()),
	  None => None,
    }
}

pub const fn copied(self) -> Option<T>
where
    T: Copy,
{
    // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
    // ready yet, should be reverted when possible to avoid code repetition
    match self {
        Some(&v) => Some(v),
        None => None,
    }
}
#+end_src

sidestep: avoid

** Result<T, E>
#+begin_src rust
pub enum Result<T, E> {
    Ok(T),
    Err(E)
}
#+end_src

*** is_ok(), is_err()
*** map(), map_or(), map_or_else()
*** unwrap(), unwrap_or(), unwrap_or_else()
*** and(), and_then() -> Self
logical_and, Err is false

*** or(), or_else() -> Self
logical_or, Err is false

*** convert to Option<T/E>
+ ok() -> Option<T>
+ err() -> Option<E>

** List<T>
+ ch06_enum.rs Cons(T, Box<List<T>>)
+ ch15_4_rc.rs Cons(T, Rc<List<T>>)
+ ch15_5_refcell.rs Cons(RefCell<T>, Rc<List<T>>)
+ ch15_6_ref_cycle.rs Cons(T, RefCell<Rc<List<T>>>),

* iterator and closure
** map VS flat_map
raw rust way to make product (no macro, itertools)
#+BEGIN_SRC rust
let lsts = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8]];
let mut res = vec![0];
for lst in lsts {
    res = res
        .into_iter()
        .flat_map(|x: i32| {
            std::iter::repeat(x * 10)
                .zip(lst.iter())
                .map(|(a, b)| a + b)
        })
        .collect();
}
dbg!(res);
#+END_SRC

** by_ref
#+BEGIN_SRC rust
fn by_ref(&mut self) -> &mut Self
where
    Self: Sized,
{
    self
}
#+END_SRC
NOTE: by_ref use a method call to take ownership temporary:
`&mut self` is sugar for `self: &mut Self` (just the return type),
`iter.by_ref()` is sugar for `(&mut iter).by_ref()`,
the "temporay variable" `&mut iter` will drop after some method calls,
then `iter` get the ownership back.

** take_while, skip_while, take, skip
#+BEGIN_SRC rust
let part1 = iter.by_ref().skip(1).take_while(|s| s != "").collect();
#+END_SRC

** cloned() VS copied()
map(|x| x.clone())

#+BEGIN_SRC rust
fn cloned<'a, T: 'a>(self) -> Cloned<Self>
where
    Self: Sized + Iterator<Item = &'a T>,
    T: Clone,
{
    Cloned::new(self)
}
#+END_SRC

#+begin_src rust
fn copied<'a, T: 'a>(self) -> Copied<Self>
where
    Self: Sized + Iterator<Item = &'a T>,
    T: Copy,
{
    Copied::new(self)
}
#+end_src

** reduce() VS fold()
** others
+ enumerate
+ rev
+ chain, zip
+ all, any, count, sum, product
+ filter
+ nth
+ step_by
+ chunks (NOTE:TODO: UTF8LossyChunksIter<'a> trait)

** TODO closure ||

* managing project
** package
#+BEGIN_SRC sh
cargo new foo # a binary package, (project)
cd foo
cargo new bar --lib # a library package
cargo new zoo # --bin
#+END_SRC
the output:
#+BEGIN_EXAMPLE
Created binary (application) `foo` package
Created library `bar` package
Created binary (application) `zoo` package
#+END_EXAMPLE

*** workspace
https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html

** crate
A package at least has a binary crate or a library crate,
at most has a library crate

*** binary crate
the crate root is main.rs, or /src/bin/

*** library crate
the crate root is lib.rs

** module
+ mod_name.rs
+ mod_name/mod.rs

#+begin_src rust
mod mod_name;
pub mod mod_name;
#+end_src

** others
*** privacy (pub or not)
mod and fn are not public by default, even though their parent mod is public
struct: we need to set pub for each field
enum: only need to set once

*** path (super, self, crate)
#+begin_src rust
use super::B;
use std::fmt::{self, Debug};
use crate::C;
#+end_src

*** use (bring a name into scope), pub use (re-exporting: reducing the import path)
#+begin_src rust
use std::{p1, p2::{p3, p4}}; // nested path is ok
#+end_src

* pattern and match (ergonomic)
** pattern
*** match arms
*** if/while let
*** for loop
*** let statement
#+begin_src rust
let (x, y, z) = (1, 2, 3);
#+end_src

*** function parameters
#+begin_src rust
fn prod_triple((x, y, z): (i32, i32, i32)) -> i32 {
    return x * y * z;
}
#+end_src

** match arms
the code in match arms can be:
+ an expression with a comma,
+ multiple lines with curly brackets without a comma

** refutable, irrefutable
match arm(except the last one), if let, while let can be refutable, others must be irrefutable

** important
NOTE: match obj will not move or copy (but destructure will drop it?)
NOTE: we can destructure slice (include array)

#+BEGIN_SRC rust
let mut p = &mut self.head;
while let Some(node) = p {
    if node.data == item {
        self.len -= 1;
	break;
    }
    p = &mut node.next;
}
// NOTE: here, we can not use p, because of the match ergonomic
// p has been destructuring to node, because of the borrowing rules,
// we can not use p even after breaking loop
// but if we use `&mut something_owned` to match,
// we can still use something_owned after breaking loop
// because we just destructure the mutable reference to another, break the scope will drop it
#+END_SRC

#+begin_src rust
struct Test {
    a: i32,
    b: String,
}
let value = Test { a: 2, "hello world".to_string()};
match value {
    Test {b} if value.len() == 11 => println!("Found: {}", x), // if we comment this value will not move
    _ => println!("Not Found!"),
}
// dbg!(&value); // we can not use value here, value was moved
#+end_src

** pattern syntax
see ch18_match.rs

https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html
https://doc.rust-lang.org/rust-by-example/flow_control/match.html

NOTE: match ergonomic
https://rust-lang.github.io/rfcs/2005-match-ergonomics.html

* slice type
https://doc.rust-lang.org/std/primitive.slice.html

** basic
+ Slices are a view into a block of memory represented as a pointer and a length
+ The shared slice type is &[T], while the mutable slice type is &mut [T]
+ As slices store the length of the sequence they refer to, they have twice the size of pointers to Sized types
#+BEGIN_SRC rust
let pointer_size = std::mem::size_of::<&u8>();
assert_eq!(2 * pointer_size, std::mem::size_of::<&[u8]>());
assert_eq!(2 * pointer_size, std::mem::size_of::<*const [u8]>());
assert_eq!(2 * pointer_size, std::mem::size_of::<Box<[u8]>>());
assert_eq!(2 * pointer_size, std::mem::size_of::<Rc<[u8]>>());
#+END_SRC

NOTE:
+ Slice do not have ownership
+ empty slice: &[], need to specify type

** [T] and &[T]
https://stackoverflow.com/questions/57808948/confusion-between-t-and-t

+ str is DST, while &str is sized.
+ [T] is DST, while &[T] is sized.

** traits
| SliceIndex | get(), index()([i]) |
| Concat     | different output    |
| Join       | different output    |

** useful methods
| binary_search[_by[_key]]   |
| chunks                     |
| get[_mut]                  |
| iter[_mut]                 |
| last[_mut]                 |
| sort(_unstable)[_by[_key]] |
| split_at_mut               |
| swap                       |
| ..                         |

** deref
Vec<T> deref to slice,
array seems not deref, but we still can use &arr as &[T]:
https://users.rust-lang.org/t/til-arrays-dont-deref-into-a-slice/32743

** string literals are slices
string literals are stored inside the binary(immutable),
&str is a slice pointing to the specific point of binary

** &str, &&str, &&&str
* generic (includ lifetime)
types, const, lifetime

see https://doc.rust-lang.org/reference/items/generics.html

NOTE: we can not use const generic to declare const/static variable

*** lifetime 'a
lifetime bound
The bound 'a: 'b is usually read as 'a outlives 'b.
'a: 'b means that 'a lasts at least as long as 'b. so a reference &'a () is valid whenever &'b () is valid.
NOTE: () means empty tuple

*** T: 'a means that all lifetime parameters of T outlive 'a
+ i32: 'static
+ 'static: 'a

*** T: Trait + 'a
NOTE: lifetimes themselves generic
scope/lifetime/lifetime_bounds.html

*** high ranked trait bound: for<'a>
*** '_ VS _ (infer lifetime VS type)
#+begin_src rust
fn print1(s: &str);                                   // elided
fn print2(s: &'_ str);                                // also elided
fn print3<'a>(s: &'a str);                            // expanded

fn new1(buf: &mut [u8]) -> Thing<'_>;                 // elided - preferred
fn new2(buf: &mut [u8]) -> Thing;                     // elided
fn new3<'a>(buf: &'a mut [u8]) -> Thing<'a>;          // expanded
#+end_src

*** Lifetime Annotations in Struct Definitions (struct Thing<'a>)
means an instance can't outlive the reference it holds

*** Lifetime elision in functions
*** which variable share lifetime
* Advanced Traits (19.2)
** visibility (pub keyword is useless)
In Rust, the methods of a trait inherit the visibility of the trait itself

** associated types and default type parameters
#+begin_src rust
pub trait Add<Rhs = Self> {
    type Output;

    fn add(self, rhs: Rhs) -> Self::Output;
}

pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;
}
#+end_src

NOTE: Rhs = Self is called default type parameters
You’ll use default type parameters in two main ways:

+ To extend a type without breaking existing code
+ To allow customization in specific cases most users won’t need

** traits in a function (impl keyword)
+ as paramter
+ as return type
+ it's just sugar for generic type which implemented the trait

** calling methods with the same name (disambiguation)
+ method: TraitName::method(&obj, ..) # TraitName::<T>
+ associated function: <StructName as TraitName>::function(..)

** supertrait, subtrait (when declare a trait)
https://doc.rust-lang.org/stable/rust-by-example/trait/supertraits.html
ch19_2_adv_trait.rs (PrintOutline trait)

#+BEGIN_SRC rust
trait Person {
    fn name(&self) -> String;
}

// Person is a `supertrait` of Student.
// equivalent: trait Student where Self: Person
trait Student: Person {
    fn university(&self) -> String;
}

trait Programmer {
    fn fav_language(&self) -> String;
}

// CompSciStudent (computer science student) is a subtrait of both Programmer and Student.
trait CompSciStudent: Programmer + Student {
    fn git_username(&self) -> String;
}
#+END_SRC


trait A { type B: Copy; } is equivalent to trait A where Self::B: Copy { type B; }.

** Using Trait Bounds to Conditionally Implement trait for some type
#+begin_src rust
impl<T: fmt::Display + ?Sized> ToString for T {
    #[inline]
    default fn to_string(&self) -> String {
	let mut buf = String::new();
	let mut formatter = core::fmt::Formatter::new(&mut buf);
	fmt::Display::fmt(self, formatter)
	    .expect("a Display implementation returned an error unexpectedly");
	buf
    }
}
#+end_src

** orphan rule, newtype pattern, deref trait
+ orphan rule: we cannot implement external traits on external types (but we can use Newtype Pattern to impl)
+ deref is awesome! (just deref wrapper to wrapped, the we can call all wrapped's methods directly on wrapper)
+ it is newtype pattern, not type alias

example: implement Display for vec<T>
#+begin_src rust
struct MyVec<T>(Vec<T>);

impl<T> std::ops::Deref for MyVec<T> {
    type Target = Vec<T>;

    fn deref(&self) -> &Self::Target {
	  &self.0
    }
}

impl<T> std::ops::DerefMut for MyVec<T> {
    // NOTE: Deref is supertrait of DerefMut, so we can use Self::Target directly
    fn deref_mut(&mut self) -> &mut Self::Target {
	  &mut self.0
    }
}

impl<T> std::fmt::Display for MyVec<T>
where
    T: std::fmt::Display,
{
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
	  write!(
	      f,
	      "MyVec[{}]",
	      self.0
		  .iter()
		  .map(|x| x.to_string())
		  .collect::<Vec<String>>()
		  .join(", ")
	  )
    }
}

#[test]
fn test_my_vec() {
    let mut lst = MyVec(vec![1, 2, 3, 4, 5]);
    println!("{}", lst);
    dbg!(lst.len());
    dbg!(lst.last());
    lst.reverse();
    println!("{}", lst);
}
#+end_src

** trait object (dyn)
#+begin_src rust
dbg!(std::mem::size_of::<Box dyn ToOwned>()); // two pointer size
#+end_src

+ only support auot-traits: send, sync, unpin (https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits)

*** dyn
+ dyn Trait VS impl Trait

dynamic object
+ &Trait, &mut Trait, Box<Trait> (Rust2015 or earlier)
+ &dyn Trait, &mut dyn Trait, Box<dyn Trait> (Rust2018 or later)

*** TODO vtable

** TODO derive
* Advanced Types (19.3)
** newtype pattern (struct NewTypeName(ExistedTypeName))
ch19_2_adv_trait.rs (Wrapper struct)

** type alias (type TypeNameAliase = ExistedTypeName)
#+BEGIN_SRC rust
type Result<T> = Result<T, std::io::Error>;
// Result is std::result::Result, which is prelude
#+END_SRC

** never type (!)
(continue, break, panic, loop)'s value

** Sized, ?Sized
DST: Dynamically Sized Type
TODO:NOTE: Every trait is a dynamically sized type
NOTE: The golden rule of dynamically sized types is that we must always put values of dynamically sized types **behind** a pointer of some kind.

+ &str, Box<str>, Rc<str>
+ &[u8], Box<[u8]>, Rc<[u8]>
+ &dyn Trait, Box<dyn Trait>, Rc<dyn Trait>
https://users.rust-lang.org/t/use-case-for-box-str-and-string/8295

Sized trait is automatically implemented for everything whose size is known at compile time (default)
Rust implicitly adds a bound on Sized to every generic function

#+BEGIN_SRC rust
fn generic<T: ?Sized>(t: &T) {
    // --snip--
}
// ?Sized means "T may or may not be Sized"
// we can only use &T (rather than T), because the type need to be sized
#+END_SRC

** DST (dynamic sized type)(unsized type)
*** rules
e.x. str is a DST, &str is slice
+ we cannot know how long a DST is until runtime
+ we cannot create a variable of type DST
+ we cannot take an argument of type DST

Golden Rule: we must always put values of dynamically sized types behind a pointer of some kind

*** two kinds
slice
trait object

TODO every trait (Sized, ?Sized) is a dynamically sized type

*** Sized trait
Rust implicitly adds a bound on Sized to every generic function
#+begin_src rust
  fn generic(t: T) {
      // --snip
  }

  fn generic<T: Sized>(t: T) {
      // --snip
  }
#+end_src

*** ?Sized means may or may not be Sized
#+begin_src rust
  fn generic<T: ?Sized>(t: &T) {
      // --snip
  }
#+end_src

* Advanced Tricks
** common const variables
#+BEGIN_SRC rust
dbg!(std::f64::consts::PI);
dbg!(std::f64::consts::E);
dbg!(i8::MIN);
#+END_SRC

** xx_or, xx_or_else
map_or, map_or_else
unwrap_or, unwrap_or_else

** std::mem crate
#+BEGIN_SRC rust
use std::mem::{take, swap, replace};
use std::mem::{forget, drop};
// forget takes ownership without running its destructor
// drop is prelude
use std::mem::{size_of_val, size_of}; // NOTE: the difference
#+END_SRC
see linkedlist.rs

source code:
#+begin_src rust
pub fn drop<T>(_x: T) {}

/// take ownership of t without running it's destructor
pub const fn forget<T>(t: T) {
    let _ = ManullyDrop::new(t);
}
#+end_src

** useful macros
+ unreachable!
+ dbg! (my dbgt!)

** retain()
example: faster? repeated intersection
#+BEGIN_SRC rust
let mut left = lst[0].clone();
for i in 1..lst.len() {
    left.retain(|x| lst[i].contains(x));
}
#+END_SRC

* prelude (traits and others)
** std::cmp
*** Ord trait and cmp (for slice::sort_by)
#+BEGIN_SRC rust
use std::cmp::Ordering;
fn cmp(&self, other: &T) -> Ordering;

pub enum Ordering{
    Less,
    Equal,
    Greater,
}
#+END_SRC

*** PartialEq, PartialOrd, Eq, Ord

partial order (divisibility, subset):
1. a <= a
2. if a <= b and b <= a, then a = b
3. if a <= b and b <= c, then a <= c

#+begin_src rust
  trait PartialEq<Rhs: ?Sized = Self> {
      fn eq(&self, other: &Rhs) -> bool;

      fn ne(&self, other: &Rhs) -> bool {
	  !self.eq(other)
      }
  }

  trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {
      // TODO: why need PartialEq<Rhs>, why needn't PartialEq<Rhs = Self>
      fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;
      // lt, le, gt, ge (with default implement)
      }
#+end_src

*** Eq (no method)

** std::marker
*** Copy trait (std::marker)
Stack-Only data

memcpy? data when moving happens

if the type, or any of its parts, has implemented the Drop trait, we cannot derive Copy trait (compile-error, stack-only data can just drop)

*** Sized
*** auto-traits
+ Send
+ Sync
+ Unpin

** ToString (std::string)
#+begin_src rust
pub trait ToString {
    fn to_string(&self) -> String;
}
#+end_src

** Clone (std::clone)
#+BEGIN_SRC rust
  pub trait Clone {
      fn clone(&self) -> Self;

      fn clone_from(&mut self, source: &Self) {
	  *self = source.clone()
      }
  }
#+END_SRC

for primitive types, just:
#+BEGIN_SRC rust
*self
#+END_SRC

** ToOwned (std::borrow)
#+begin_src rust
  pub trait ToOwned {
      type Owned: Borrow<Self>;
      fn to_owned(&self) -> Self::Owned;

      fn clone_into(&self, target: &mut Self::Owned) {
	  *target = self.to_owned();
      }
  }
#+end_src

** Default (std::default)
#+begin_src rust
  use crate::dbgt;


  #[derive(Debug)]
  struct TestDefault<T> {
      i: i32,
      s: String,
      v: Vec<T>
  }

  impl<T> TestDefault<T> {
      fn new() -> Self {
	    Self {
		i: 0,
		s: String::new(),
		v: Vec::new()
	    }
      }
  }

  impl<T> Default for TestDefault<T> {
      // clippy::new_without_default warning
      fn default() -> Self {
	    Self::new() // a common implement
      }
  }

  #[test]
  fn test_default() {
      let a: TestDefault<u8> = TestDefault::default(); // or Default::default();
      let b = TestDefault {
	    v: vec![6, 6, 6],
	    ..TestDefault::default() // or Default::default()
      };
      dbgt!(&a);
      dbgt!(&b);
  }
#+end_src

** TODO std::iter
** std::convert
*** AsRef trait (TODO AsMut)
#+BEGIN_SRC rust
pub trait AsRef<T: ?Sized> {
    /// Performs the conversion.
    #[stable(feature = "rust1", since = "1.0.0")]
    fn as_ref(&self) -> &T;
}
#+END_SRC
#+BEGIN_SRC rust
use std::fs::File;
use std::io;
use std::io::Read;
use std::path::Path;

pub fn get_file_content<P: AsRef<Path>>(file_path: P) -> Result<String, io::Error> {
    let mut file = File::open(file_path)?;
    let mut content = String::new();
    file.read_to_string(&mut content)?;
    Ok(content)
}
#+END_SRC
#+BEGIN_SRC rust
fn test_as_ref<T: AsRef<str> + std::fmt::Debug>(s: T) {
    dbgt!(&s.as_ref());
}

#[test]
fn test() {
    test_as_ref("hello");
    test_as_ref(String::from("hello"));
}
#+END_SRC

*** TODO From and Into

** std::ops
+ Drop
+ Fn
+ FnMut
+ FnOnce

** TODO 2021
*** std::iter::FromIterator
#+begin_src rust
impl<T> FromIterator<T> for LinkedList<T> {
    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
        let mut lst = Self::new();
        for item in iter {
            lst.push_back(item);
        }
        lst
    }
}
#+end_src

** others (function, struct, enum)
+ std::mem::drop
+ std::boxed::Box
+ std::option::Option::{self, Some, None}
+ std::result::Result::{self, Err, Ok}
+ std::string::String
+ std::vec::Vec

** derivable trait
+ Copy
+ Clone
+ Default
+ PartialEq, PartialOrd, Ord

* I/O

* workflow
** testing
#+BEGIN_SRC rust
#[test]
#[ignore] // filter
#+END_SRC

#+BEGIN_SRC rust
assert!(expr);
assert_eq!(lhs, rhs); // will print lhs rhs when failed
assert_ne!(lhs, rhs); // need same type
#+END_SRC

use -- --nocapture to show println message

release opt-level:
#+BEGIN_QUOTE
Cargo.toml
[profile.test]
opt-level = 3
#+END_QUOTE

** rust-compile-optimize
https://magiclen.org/rust-compile-optimize/

** time profile
https://www.youtube.com/watch?v=BxSEhr2MggY

update Cargo.toml to get debug info perf need
#+BEGIN_SRC conf
[profile.release]
debug = true
#+END_SRC

#+BEGIN_SRC sh
cargo build --release
perf record cargo run --release
perf report
perf stat
#+END_SRC

install by perf's hint
#+BEGIN_SRC sh
linux-tools-generic
linux-tools-5.11.0-40-generic
#+END_SRC

/proc/sys/kernel/perf_event_paranoid
change 4 -> -1

* cargo
** special directory, special command
*** /tests
https://doc.rust-lang.org/book/ch11-03-test-organization.html
Integration Tests can only test *library's public* API
#+BEGIN_SRC sh
cargo test # everything is same as unit tests
#+END_SRC

*** /examples
#+BEGIN_SRC sh
cargo run --example example # /root/examples/example.rs
#+END_SRC

*** src/bin
#+BEGIN_SRC sh
cargo run --bin server # run sp crate /root/src/bin/
#+END_SRC

** local dependencies
Cargo.toml
#+BEGIN_SRC conf
[dependencies]
utils = { path = "utils", version = "0.1.0"}
#+END_SRC

If you only want to keep one copy of codes
#+BEGIN_SRC sh
ln -s <real folder> <link folder>
#+END_SRC

** package version
version = "x.y.z" is short for "^x.y.z"
cargo run will keep version, cargo update will update to x.y.max

** clippy
+ replace println!("") with println!()
+ replace write!(f, "\n") with writeln!(f)
+ https://rust-lang.github.io/rust-clippy/master/index.html#op_ref
+ https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
+ https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
+ https://rust-lang.github.io/rust-clippy/master/index.html

+ use is_empty() rather than ""  .len()
  + &str
  + String
  + collections

+ https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure

+ if let None -> is_none()

** "hello".bytes().nth(3) (Option<u8>) -> "hello".as_bytes().get(3) (Option<&u8>)
** Index trait (use .as_bytes()[i] -> u8)
#+begin_src rust
use std::ops::{Deref, DerefMut, Index, IndexMut};
use std::slice::SliceIndex;

struct TestIndex<T> {
    data: Vec<T>,
}


impl<T> Deref for TestIndex<T> {
    type Target = Vec<T>;

    fn deref(&self) -> &Self::Target {
	    println!("Called deref");
	    &self.data
    }
}

impl<T, I: SliceIndex<[T]>> Index<I> for TestIndex<T> {
    type Output = I::Output;
    fn index(&self, index: I) -> &Self::Output {
	    Index::index(&**self, index)
	    // *self is an object of TestIndex
    }
}

impl<T> DerefMut for TestIndex<T> {
    // type Target = Vec<T>; // use supertrait Deref's Target
    fn deref_mut(&mut self) -> &mut Self::Target {
	    println!("Called deref_mut");
	    &mut self.data
    }
}

impl<T, I: SliceIndex<[T]>> IndexMut<I> for TestIndex<T> {
    // type Output = I::Output; // use supertrait Index's Target
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
	    IndexMut::index_mut(&mut **self, index)
    }

}

#[test]
fn test() {
    let mut lst = TestIndex {
        data: vec![
            "1".to_string(),
            "2".to_string(),
            "3".to_string(),
            "4".to_string(),
        ],
    };
    lst[1] = "hello".to_string();
    // [index] will return *container.index(index)
}
#+end_src

* see code
** error handling: see ch09_err.rs
** smart pointer
String, Vec are smart pointers (3 * pointer_size)

** fearless concurrency
** OO (forget about it)

* other
#+begin_src rust
pub fn replace<'a, P>(&'a self, from: P, to: &str) -> String
where
    P: Pattern<'a>,
#+end_src
NOTE: The pattern can be a &str, char, a slice of chars, or a function or closure that determines if a character matches.

str.split -> Split (impl Iterator)

* rustup
** 配置
#+begin_src sh
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
#+end_src

#+begin_src sh
  rustup toolchain install nightly
  rustc -vV # host: aarch64-apple-darwin
  rustup component add rust-src --toolchain nightly

  rustup component add rust-docs --toolchain stable
#+end_src


* cow
Borrow trait

* 如何看一个类有没有实现某个 trait
#+begin_src rust
fn main() {
    <str as Clone>::clone; // 红色下划线
    <i8 as Clone>::clone;
    <&Vec<i8> as Clone>::clone;
}
#+end_src

* TODO macos 下子 crate 不能跳转，和鼠标点击快速运行的选项，看看是不是 workspace 的问题
* map/filter/filter_map (x, &x)
#+begin_src rust


  //P: FnMut(Self::Item) -> B
  //P: FnMut(&Self::Item) -> bool
  //F: FnMut(Self::Item) -> Option<B>

  use utils::dbgt;
  let raw = [[1u16, 2u16], [3u16, 4u16]];
  let count = &raw;
  count
      .iter()
      .map(|x| {
	  dbgt!(&x); // side effect should put in loop, rather than map()
	  x
      })
      .filter(|x| {
	  dbgt!(&x);
	  true
      })
      .count();
#+end_src

* constant vs static

a static variable have a fixed address in memory. Constants, on the other hand, are allowed to duplicate their data whenever they’re used.

 Accessing an immutable static variable is safe.

 static variables can be mutable

#+begin_src rust
struct TypeWithDestructor(i32);

impl Drop for TypeWithDestructor {
    fn drop(&mut self) {
        println!("Dropped. Held {}.", self.0);
    }
}

const ZERO_WITH_DESTRUCTOR: TypeWithDestructor = TypeWithDestructor(0);

fn create_and_drop_zero_with_destructor() {
    let x = ZERO_WITH_DESTRUCTOR;
    // x gets dropped at end of function, calling drop.
    // prints "Dropped. Held 0.".
}
#+end_src

https://rust-lang.github.io/rfcs/0246-const-vs-static.html

https://users.rust-lang.org/t/what-is-const-fn/11879/2

https://rust-lang.github.io/rfcs/0911-const-fn.html
Allow marking free functions and inherent methods as const, enabling them to be called in constants contexts, with constant arguments.

非 const 参数, 就不会在编译期运行

* https://github.com/rust-lang/rust/issues/id
